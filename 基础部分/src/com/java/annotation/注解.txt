
注解<---反射机制读取注解

- Annotation JDK5.0引入的新技术

- 在哪里使用
  注解可以附在package、class、method、field等上面

分析
- @interface用来声明一个注解 格式：public @ interface 注解明{}
- 一般使用@Target和@Rentention限制注解的作用域和作用时间
- 方法的名称就是参数的名称
- 只有一个参数成员，一般参数名为value，使用该注解时参数可以省略value值
- 注解方法内的参数值可以使用default来声明，注解元素必须要有值，定义注解元素时，经常使用空字符串或者0作为默认值


=============================================================
内置注解：
- @Override
  表示一个方法声明打算重写超类的另一个方法；

- Deprecated
  此注释可以用于修饰方法，属性，类

  // 源码时有效
- SuppressWarning("all")
  SuppressWarning("unchecked")
  SuppressWarning(value = {"unchecked","deprecation"})

  镇压警告，传入参数，可以用在方法和类上面
  用来抑制编译时的警告信息

=============================================================
元注解(meta-annotation)  作用：负责注解其他注解

    @Target （作用域）表示我们的注解可以用在哪些地方  (是否可以用在类或者方法)

    @Retention （作用时间） 表示我们的注解什么地方还有效， 需要在什么级别保存该注释
       (SOURCE < CLASS < RUNTIME)

    @Documented 表示是否将我们的注解生成在JAVAdoc中

    @Inherited 子类可以继承父类的注解

=============================================================









