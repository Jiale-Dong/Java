反射的学习目标：   外挂的实现原理，游戏运行时改变数据
- 1. Java反射机制概述
- 2. 理解Class类并获取Class实例
- 3. 类的加载与ClassLoader
- 4. 创建运行时类的对象
- 5. 获取运行时类的完整结构
- 6. 调用运行时类的指定结构

====================================================================
静态语言与动态语言

- 静态语言：Java、 C、 C++
  Java不是动态语言，但Java可以称之为“准动态语言”。利用反射机制获得类似动态语言的特性
  Java的动态性让编程变得更加灵活

- 动态语言：C#、PHP、Python、Object-c、JavaScript
  运行时代码可以根据某些条件改变自身结构

====================================================================
定义：Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于
     Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性和方法

优点：
    可以实现动态创建对象和编译，体现出很大的灵活性

缺点：
    对性能有影响。反射基本是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。
    这类操作总是慢于直接执行相同的操作

====================================================================

反射相关主要的API

- java.lang.Class: 代表一个类
  Object类中定义了一下的方法，此方法被所有子类默认继承
  public final Class getClass(): 以上的方法返回值的类型是一个Class类
  此类是Java反射的源头

- java.lang.reflect.Method: 代表类的方法
- java.lang.reflect.Field: 代表类的成员变量
- java.lang.reflect.Constructor: 代表类的构造器

====================================================================
补充：Class类
class是由JVM在执行过程中动态加载的。JVM在第一次读取到一种class
类型是，将其加载进内存；

每加载一种class，JVM就为其创建一个Class类型的实例，并关联起来。
注意：这里的Class类型是一个名叫Class的class。

    // 一个Class对象包含了某个结构(class、interface、enumerate、annotation、primitive type(基本数据类型)、void、[])
    (即哪些类型可以有Class对象：class、interface、enum、[]、annotation、void)
    public final class Class {
        private Class() {}
    }

- Class本身也是一个类
- Class对象只能由系统建立对象
- 一个加载的类在JVM中只会有一个Class实例
- 一个Class对象对应的是一个加载到JVM中的一个.class文件
- 每个类的实例都会记得自己是由哪个Class实例所生成 ？
- 通过Class可以完整的得到一个类中的所有被加载的结构
- Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的
  Class对象

====================================================================
即哪些类型可以有Class对象：class、interface、enum、[]、annotation、void














